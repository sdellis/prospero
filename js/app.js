// js/app.js

  var app = app || {};
  var ENTER_KEY = 13;

  $(function() {

    // Kick things off by creating the **App**.
    new app.AppView();

  });


// Config, Constants, and States
var baseURI = 'http://library.princeton.edu/api/presentation/2.0';
var ids = new Array(baseURI); // ensures all ids are registered and unique
var curPage = '';

// Helpers
var logObj = function(obj){
        console.log(JSON.stringify(obj));
    }

var logChange = function(obj) {
     // var name = (obj.get('type') == 'collection' ? obj.get('label') : obj.get('title'));
     console.log(obj.get('label')  + ' has changed. (' + obj.get('type') + ')'); 
}

function slugify(text)
{
  return text.toString().toLowerCase()
    .replace(/\s+/g, '-')           // Replace spaces with -
    .replace(/[^\w\-]+/g, '')       // Remove all non-word chars
    .replace(/\-\-+/g, '-')         // Replace multiple - with single -
    .replace(/^-+/, '')             // Trim - from start of text
    .replace(/-+$/, '');            // Trim - from end of text
}

var setID = function(obj){
    // todo: look into using the autogenerated cid (clientID) found here under Retrieving Models:
    // http://addyosmani.github.io/backbone-fundamentals/#collections
    // 
    // todo: set the root collection to have the id of 'baseURI/collection/top' 
    // and 'top' as its label... how is this determined?
    // by not being 'within' any other collections, or is it simply user defined?
     var lineage = '';
     if(typeof obj.get('within') !== "undefined") {
       lineage = (obj.get('within').length > 0 ? _.first(obj.get('within')) + '/' : '');
     }
     id = baseURI + '/' + lineage + obj.get("type") + '/' + slugify(obj.get("label"));
     idsLen = ids.length;
     if (_.indexOf(ids, id) > -1){ // if exists, append index to certify uniqueness
         id += idsLen;
     }
     ids.push(id);
     obj.set({ id: id });
     console.log  ( obj.get("label") + " added to registry at " + id );
}


// do stuff
/*
var manifest1 = new Manifest({
    label: "Foobar",
    completed: true
});
var collection1 = new Collection({ label: 'My Collection' });
var collection2 = new Collection({});
collection1.set({ label: "Sample Manifests" });
logObj(collection1);
logObj(collection2);
var sequence1 = new Sequence( { label: "Empty Sequence" } );
var canvas1 = new Canvas( { label: "Blank Canvas" } );
var canvas2 = new Canvas( { label: "Another Blank Canvas" } );
*/

// var c = sequence1.get("canvases").clone(); // we need to clone to trigger change event
// console.log(typeof c);
// c.push(canvas1);
// sequence1.set("canvases", c);

/*
sequence1.unset("canvases", {validate: true});  // validate that sequence has at least one canvas
sequence1.addCanvas(canvas1);

var canvases = new CanvasCollection([canvas1]);
canvases.add(canvas2);
sequence1.set("canvases", canvases); 
console.log("Collection size: " + canvases.length);
console.log("Sequence size: " + sequence1.get("canvases").length);
var somecanvas = canvases.get("http://library.princeton.edu/api/presentation/2.0/canvas/another-blank-canvas");
logObj(somecanvas);
// canvases.remove([canvas1,canvas2]);
console.log("Collection size: " + canvases.length);
console.log(canvases.pluck('label'));
console.log(canvases.indexOf(canvas2));
var container = $('<div class="container"></div>');
var view = new ThumbsView({el: container});
*/
